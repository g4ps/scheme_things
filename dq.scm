(define (make-dq)
  (cons (cons '() '() ) (cons '() '()))
  )

(define (new-pair) (cons '() '()))
(define (front-ptr q) (car q))
(define (rear-ptr q) (cdr q))
(define (front-q q) (car q))
(define (rear-q q) (cdr q))
(define (set-front-ptr q arg) (set-car! q arg))
(define (set-rear-ptr q arg) (set-cdr! q arg))
(define (empty-q? q) (null? (front-ptr q)))
(define (empty-dq? q) (null? (front-q q)))
(define (add-to-front q arg)
  ;; (if (empty-dq? q)
  ;;     (let ((newf (new-pair))
  ;; 	    (newr (new-pair))
  ;; 	    )
  ;; 	(begin
  ;; 	  (set-front-ptr (front-q q
  ;; 	  (set-front-ptr (front-q q) arg)
  ;; 	  (set-rear-ptr (front-q q) arg)
  ;; 	  (set-front-ptr (rear-q q) arg)
  ;; 	  (set-rear-ptr (rear-q q) arg)	
  ;; 	  )
  ;; 	)
      (let ((newf (new-pair))
	    (newr (new-pair)))
	(begin
	  (set-cdr! newf (front-ptr (front-q q)))
	  (set-car! newf arg)
	  (set-front-ptr (front-q q) newf)
	  (set-cdr! newr '())
	  (set-cdr! (rear-ptr (rear-q q)) newr)
	  (set-rear-ptr (rear-q q) newr)
      )
	)
      )
;  )
      

(define (print-q q)
  (let ((fq (front-q q)))
    (while (not (empty-q? fq))
	   (begin
	     (display (car fq))
	     (display " -> ")
	     (set! fq (cdr fq))
	     )
	   )
    (newline)
    )
  )

(define x (make-dq))

(add-to-front x 10)
(print-q x)

